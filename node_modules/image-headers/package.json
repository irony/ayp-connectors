{
  "name": "image-headers",
  "version": "0.3.3",
  "description": "Parse image headers from a stream without loading the entire image.",
  "keywords": [
    "exif",
    "jpeg",
    "jpg",
    "gif",
    "png",
    "streaming"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/sujal/node-image-headers.git"
  },
  "bugs": {
    "url": "http://github.com/sujal/node-image-headers/issues"
  },
  "author": {
    "name": "Sujal Shah",
    "email": "codesujal@gmail.com",
    "url": "http://sujal.net"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/image_headers",
  "dependencies": {
    "exif": "git://github.com/sujal/node-exif.git#image-headers-0.3.3"
  },
  "devDependencies": {
    "coffee-script": "*",
    "buffered-reader": "*",
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "test": "NODE_PATH=lib NODE_ENV=test node_modules/mocha/bin/mocha -R dot --recursive --require coffee-script --timeout 15000 test/*.coffee"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "# ImageHeaders\n\nThis is a simple class that can be used with a stream to read\nall the metadata from an image file without storing the entire file in memory.\n\nTypically, most libraries in Node take in the stream, save it somewhere\n(either a Buffer or to disk), then hand the image file off to an external library.\n\nWe have a image uploader service that basically proxies through the stream\ndirectly to S3 - we don't want to hit our disk at all. This was the only way we could\nhit that goal and still get our metadata.\n\n## Usage\n\n````\nnpm install image-headers\n````\n\nSee the test file for how we are using it. Here's the key snippet:\n\n````\nimage_headers = new ImageHeaders()\n\n  new DataReader(file_name)\n    .on \"error\", (error) ->\n      console.log (\"error: \" + error)\n      return callback(error)\n    .on \"byte\", (b) ->\n      # console.log (\"byte: \" + b)\n      image_headers.add_bytes(b) unless image_headers.finished\n    .on \"end\", () ->\n      # console.log (\"EOF\");\n      image_headers.finish (err, image_headers) ->\n        return callback(err, image_headers)\n    .read()\n````\n\nThat's in CoffeeScript.\n\nThe `finish` call is important - it's what processes the EXIF tags (and\nin the future anything similar that can benefit from an external library). This\nkeeps our code simpler from having us stream and parse EXIF on the fly. No library\ndoes this well, as far as I can find.\n\n## TODO\n\n- performance and general cleanup. This was a weekend hack (really a 24 hour one) and it shows.\n- clean up internals and exposed data structures. Right now, it's all properties on the object.\n- add support for additional metadata, including GPS and Camera model, as top level features\n\n## License\n\nSee the LICENSE file for details, but short version: MIT License.\n\n",
  "readmeFilename": "README.md",
  "_id": "image-headers@0.3.3",
  "_from": "image-headers@~0.3.3"
}
