<div class="container">

  <div class="modal" ng-controller="UploadController" dropzone> 

    <div class="modal-header">
      <h1>
        Upload Photos to Your Timeline
        <a class="close" data-dismiss="modal" href="/wall" >&times;</a>
      </h1>
      <p class="lead">
        Just drag and drop your Photo folders below. If you have many folders, just add them all. If you get interrupted, try again and we will continue where you left off. 
      </p>
    </div>
    <div id="dropzone" class="dropzone media modal-body" >
    
      <div class="instructions" ng-show="!files.length">
        <i class="icon-cloud-upload icon-4x pull-left" > </i>
        <label> Drop your photo folder here or press to select...
          <input  class="btn-large span3 btn-success" type="file" id="directoryinput" multiple webkitdirectory ng-model="selectedFolder" ng-change="fileChange">
        </label>
      </div>
      <ul class="media-list">
        <li class="media span2" ng-repeat="file in files">
          <img src="{{file.thumbnail}}" ng-cloak ng-show="file.thumbnail" class="pull-left"/>
          <a class="{{file.state == 'Duplicate' && 'icon-cloud' || file.state == 'Uploading' && 'icon-spinner' || 'icon-cloud-upload' }} pull-left icon-2x"> </a>
          <div class="media-body">
            <h4 class="media-heading">{{file.name}}</h4>
            <div class="progress progress-striped {{file.state == 'Uploading' && 'active' || ''}}">
              <div title="{{file.error}}" class="bar {{file.state == 'Error' && 'bar-danger' || file.state == 'Done' && 'bar-success' || ''}}" style="width: {{file.progress || 0}}%;">{{file.state}}</div>
            </div>
          </div>
        </li>
      </ul>

    </div>
    <div class="modal-footer">
      <a href="#" class="btn btn-large btn-success pull-right " ng-disabled="!files.length" ng-click="startUpload()">Upload {{files.length && files.length + " photos" || ""}}</a>
    </div>
  </div>

</div>

<script>
function UploadController($scope, $http){

  $scope.state = null;
  $scope.files = [];
  /* Drag'n drop stuff */


  //process files
  $scope.fileChange = function (e) {
    var files = e.target.files;
    for(i=0; i<files.length; i++) {
        var file = files[i];
        if(file.type.match(/image.*/)){
            $scope.files.push(file);
        }
    }
  };

  var uploadInterval;
  $scope.startUpload = function(){
    console.log('upload');
    
    clearInterval(uploadInterval);

    // check every interval for new files to process but don't add new if the current ones are in a processing state
    uploadInterval = setInterval(function(){
      $scope.files.filter(function(file){return !file.state || file.state === "Processing" || file.state === "Uploading" }).slice(0,1).forEach(function(file){
        if (file.thumbnail === undefined) generateThumbnail(file, {width:640, height:480}, function(err, file){
          if (!err) queueFile(file, $scope.upload);
        });
      });
      $scope.$apply();
    }, 1000);
  };

  function queueFile(file) {
    console.log('queue')
    fr   = new FileReader;
    fr.onloadend = function() {
        if ($scope.library && $scope.library.photos){
          var exif = EXIF.readFromBinaryFile(new BinaryFile(this.result));

          if ($scope.library.photos.filter(function(photo){
            var taken = exif.DateTime ? exif.DateTime.slice(0,10).split(':').join('-') + exif.DateTime.slice(10) : null;
            return photo.taken == taken;
          }).length) return file.state = "Duplicate";
        }
        
        if (!file.state) {
          uploadFile(file, exif, function(err){
            if (err) console.log('Error when uploading', err);
          });
        }
    };
    fr.readAsBinaryString(file);
  }

  function uploadFile(file, exif, done){
    var fd = new FormData();
    //fd.append('original|'+exif.DateTime+'|'+file.size, file);
    fd.append('thumbnail|'+exif.DateTime, file.thumbnail);

    var xhr = new XMLHttpRequest();
    xhr.timeout = 10 * 60 * 1000;
    xhr.open("POST", "/api/upload", true);

    xhr.onload = function() {
      if(this.status !== 200){
        file.state = 'Error';
        file.error = JSON.parse(xhr.responseText);
        file.progress = 30;
        return done(file.error, file);
      } else {
          var response = JSON.parse(xhr.responseText);
          console.log('Done', response);
          file.response = response;
          file.state = 'Done';
          file.progress = 100;
          return done(null, file);
      }
    }

    // Listen to the upload progress.
    xhr.upload.onprogress = function(e) {
        file.state = 'Uploading';
      if (e.lengthComputable) {
        file.progress = (e.loaded / e.total) * 100;
      } else {
        file.progress = Math.min(file.progress++, 100);
      }
    };

    xhr.onend

    file.progress = 1;
    xhr.send(fd);
  }


  function generateThumbnail(file, options, done){
    file.thumbnail = null; 

    options = options || {};
    var img = document.createElement("img");
    var reader = new FileReader();
    
    try {
      reader.readAsDataURL(file);
      reader.onloadend = function() {
        img.src = this.result;
        var MAX_WIDTH = options.width || 640;
        var MAX_HEIGHT = options.height || 480;

        img.onload = function(){

          var width = img.width;
          var height = img.height;

          if (width > height) {
            if (width > MAX_WIDTH) {
              height *= MAX_WIDTH / width;
              width = MAX_WIDTH;
            }
          } else {
            if (height > MAX_HEIGHT) {
              width *= MAX_HEIGHT / height;
              height = MAX_HEIGHT;
            }
          }

          var canvas = document.createElement('canvas');
          canvas.width = width;
          canvas.height = height;

          var ctx = canvas.getContext("2d");
          ctx.drawImage(this, 0, 0, width, height);

          canvas.toBlob(function(blob){
            file.thumbnail = blob;
            if (done) return done(null, file);
          }, "image/jpeg");

//          file.thumbnail = canvas.toDataURL("image/jpeg");
          if (done) return done(null, file);
        };
      };
    } catch(err){
      if (done) return done(err);
    }
  }

}
 
</script>

<script src="/js/binaryFile.js"></script>
<script src="/js/exif.js"></script>
